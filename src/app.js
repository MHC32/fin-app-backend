// src/app.js - Serveur Express FinApp Haiti
// âœ… AVEC ERRORHANDLER.JS INTÃ‰GRÃ‰

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const morgan = require('morgan');
require('dotenv').config();

// ===================================================================
// âœ… NOUVEAU : IMPORT ERROR HANDLER MIDDLEWARE
// ===================================================================
const { 
  globalErrorHandler, 
  notFoundHandler,
  handleUncaughtException,
  handleUnhandledRejection,
  handleSIGTERM 
} = require('./middleware/errorHandler');

// ===================================================================
// âœ… IMPORTANT : HANDLER UNCAUGHT EXCEPTIONS (AU TOUT DÃ‰BUT)
// ===================================================================
handleUncaughtException();

// Import configuration database
const { connectDB } = require('./config/database');

const app = express();

// =============================================================================
// CONNEXION DATABASE
// =============================================================================
connectDB();

// =============================================================================
// MIDDLEWARE BASIQUES
// =============================================================================

// SÃ©curitÃ© headers
app.use(helmet());

// Compression responses
app.use(compression());

// CORS pour frontend React (port 3000)
app.use(cors({
  origin: ['http://localhost:3000', 'http://127.0.0.1:3000'],
  credentials: true
}));

// Parsing JSON
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Logging en dÃ©veloppement
if (process.env.NODE_ENV !== 'production') {
  app.use(morgan('dev'));
}

// =============================================================================
// ROUTES DE BASE
// =============================================================================

// Route de bienvenue
app.get('/', (req, res) => {
  res.json({
    message: 'FinApp Haiti API ðŸ‡­ðŸ‡¹',
    version: '1.0.0',
    status: 'running'
  });
});

// Health check
app.get('/api/health', (req, res) => {
  res.json({
    status: 'OK',
    message: 'FinApp Haiti API fonctionne!',
    timestamp: new Date().toISOString(),
    version: '1.0.0'
  });
});

// Route info API
app.get('/api', (req, res) => {
  res.json({
    message: 'Bienvenue sur l\'API FinApp Haiti! ðŸ‡­ðŸ‡¹',
    description: 'Gestion financiÃ¨re adaptÃ©e au contexte haÃ¯tien',
    version: '1.0.0',
    endpoints: {
      health: '/api/health',
      info: '/api'
    }
  });
});

// =============================================================================
// ROUTES API (prÃ©parÃ©es pour les phases suivantes)
// =============================================================================

// Routes Auth
app.use('/api/auth', require('./routes/auth'));

// Routes Users  
app.use('/api/users', require('./routes/users'));

// Routes Accounts
app.use('/api/accounts', require('./routes/accounts'));

// Routes Transactions
app.use('/api/transactions', require('./routes/transactions'));

// Routes Budgets
app.use('/api/budgets', require('./routes/budgets'));

// Routes Sols
app.use('/api/sols', require('./routes/sols'));

// Routes Investments
app.use('/api/investments', require('./routes/investments'));

// Routes Debts
app.use('/api/debts', require('./routes/debts'));

// Routes Notifications
app.use('/api/notifications', require('./routes/notifications'));

// Routes AI
app.use('/api/ai', require('./routes/ai'));

// TODO Phase 7: Routes Uploads
// app.use('/api/uploads', require('./routes/uploads'));

// =============================================================================
// âœ… NOUVEAU : ERROR HANDLING AVEC ERRORHANDLER.JS
// =============================================================================

/**
 * 404 - Route non trouvÃ©e
 * âœ… Utilise notFoundHandler du middleware errorHandler.js
 * Ã€ placer AVANT le globalErrorHandler
 */
app.use(notFoundHandler);

/**
 * Global Error Handler
 * âœ… Utilise globalErrorHandler du middleware errorHandler.js
 * Doit Ãªtre le DERNIER middleware
 * 
 * GÃ¨re automatiquement :
 * - Erreurs opÃ©rationnelles (AppError et dÃ©rivÃ©es)
 * - Erreurs MongoDB (CastError, ValidationError, duplicates)
 * - Erreurs JWT (JsonWebTokenError, TokenExpiredError)
 * - Erreurs gÃ©nÃ©riques avec stack trace en dev
 * - Logging centralisÃ©
 */
app.use(globalErrorHandler);

// =============================================================================
// DÃ‰MARRAGE SERVEUR
// =============================================================================
const PORT = process.env.PORT || 3001;

const server = app.listen(PORT, () => {
  console.log('ðŸš€ ================================');
  console.log('ðŸš€ FinApp Haiti API dÃ©marrÃ©e!');
  console.log(`ðŸš€ Port: ${PORT}`);
  console.log(`ðŸš€ Environnement: ${process.env.NODE_ENV || 'development'}`);
  console.log(`ðŸš€ URL: http://localhost:${PORT}`);
  console.log(`ðŸš€ Health: http://localhost:${PORT}/api/health`);
  console.log('ðŸš€ ================================');
});

// =============================================================================
// âœ… NOUVEAU : PROCESS ERROR HANDLERS
// =============================================================================

/**
 * GÃ¨re les rejets de promesses non gÃ©rÃ©s (async errors)
 * âœ… Utilise handleUnhandledRejection du middleware errorHandler.js
 */
handleUnhandledRejection(server);

/**
 * GÃ¨re SIGTERM pour shutdown propre
 * âœ… Utilise handleSIGTERM du middleware errorHandler.js
 */
handleSIGTERM(server);

// =============================================================================
// EXPORT
// =============================================================================
module.exports = app;

/**
 * ===================================================================
 * DOCUMENTATION INTÃ‰GRATION ERRORHANDLER.JS
 * ===================================================================
 * 
 * Modifications effectuÃ©es dans ce fichier :
 * 
 * 1. âœ… IMPORTS (ligne 15-22)
 *    - Ajout des imports errorHandler middleware
 *    - globalErrorHandler, notFoundHandler
 *    - handleUncaughtException, handleUnhandledRejection, handleSIGTERM
 * 
 * 2. âœ… UNCAUGHT EXCEPTIONS (ligne 27)
 *    - handleUncaughtException() appelÃ© au tout dÃ©but
 *    - Capture les erreurs synchrones non catchÃ©es
 * 
 * 3. âœ… 404 HANDLER (ligne 153)
 *    - app.use(notFoundHandler) aprÃ¨s toutes les routes
 *    - Capture les routes inexistantes
 * 
 * 4. âœ… GLOBAL ERROR HANDLER (ligne 166)
 *    - app.use(globalErrorHandler) en dernier middleware
 *    - GÃ¨re toutes les erreurs de l'application
 * 
 * 5. âœ… UNHANDLED REJECTIONS (ligne 193)
 *    - handleUnhandledRejection(server) aprÃ¨s server.listen
 *    - Capture les promesses rejetÃ©es non gÃ©rÃ©es
 * 
 * 6. âœ… SIGTERM HANDLER (ligne 199)
 *    - handleSIGTERM(server) pour shutdown propre
 *    - Ferme le serveur proprement lors de l'arrÃªt
 * 
 * BÃ©nÃ©fices :
 * - âœ… Gestion d'erreurs centralisÃ©e et cohÃ©rente
 * - âœ… Pas de crashes inattendus
 * - âœ… Logging centralisÃ© de toutes les erreurs
 * - âœ… Messages d'erreurs clairs en dev, sÃ©curisÃ©s en prod
 * - âœ… Recovery automatique des erreurs rÃ©cupÃ©rables
 * - âœ… Shutdown propre du serveur
 * 
 * Prochaine Ã©tape :
 * - Refactorer les 10 controllers pour utiliser catchAsync
 * - Remplacer les try/catch par catchAsync wrapper
 * - Utiliser les classes d'erreurs (NotFoundError, etc.)
 * ===================================================================
 */