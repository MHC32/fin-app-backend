// üîç SCRIPT DE DIAGNOSTIC ACC√àS SOL - FINAPP HAITI
// Cr√©er ce fichier: src/scripts/debugSolAccess.js
// 
// Ce script diagnostique compl√®tement pourquoi l'erreur "Acc√®s non autoris√© √† ce sol" se produit
// Usage: node src/scripts/debugSolAccess.js [SOL_ID] [USER_EMAIL]

const mongoose = require('mongoose');
const Sol = require('../models/Sol');
const User = require('../models/User');
const authService = require('../services/authService');
const { verifyAccessToken, extractBearerToken } = require('../config/jwt');
require('dotenv').config({ path: '.env.local' });

// ===================================================================
// CONFIGURATION DU DEBUG
// ===================================================================

const DEBUG_CONFIG = {
  // ID du sol probl√©matique (r√©cup√©r√© depuis votre screenshot)
  SOL_ID: process.argv[2] || '66d4a49ba83fa0d4c1fbe152', // ID visible dans votre interface
  
  // Email de votre utilisateur
  USER_EMAIL: process.argv[3] || 'hantzmichaelchery6@gmail.com', // Remplacez par votre email
  
  // Options de debug d√©taill√©
  VERBOSE: true,
  SHOW_FULL_OBJECTS: false,
  SIMULATE_TOKEN_VALIDATION: true
};

console.log('üîç === DIAGNOSTIC ACC√àS SOL FINAPP HAITI ===');
console.log(`üéØ Sol ID: ${DEBUG_CONFIG.SOL_ID}`);
console.log(`üë§ User Email: ${DEBUG_CONFIG.USER_EMAIL}\n`);

// ===================================================================
// 1. CONNEXION BASE DE DONN√âES
// ===================================================================

const connectDatabase = async () => {
  try {
    console.log('1Ô∏è‚É£ CONNEXION BASE DE DONN√âES:');
    
    const mongoURI = process.env.MONGODB_URI || 'mongodb://localhost:27017/finapp_haiti_dev';
    console.log(`üîó URI: ${mongoURI.replace(/\/\/[^:]+:[^@]+@/, '//***:***@')}`);
    
    await mongoose.connect(mongoURI);
    
    console.log('‚úÖ MongoDB connect√© avec succ√®s');
    console.log(`‚úÖ Database: ${mongoose.connection.name}`);
    console.log(`‚úÖ Host: ${mongoose.connection.host}`);
    console.log('');
    
    return true;
  } catch (error) {
    console.error('‚ùå ERREUR Connexion MongoDB:', error.message);
    return false;
  }
};

// ===================================================================
// 2. ANALYSE UTILISATEUR
// ===================================================================

const analyzeUser = async () => {
  try {
    console.log('2Ô∏è‚É£ ANALYSE UTILISATEUR:');
    
    const user = await User.findOne({ email: DEBUG_CONFIG.USER_EMAIL });
    
    if (!user) {
      console.log('‚ùå UTILISATEUR NON TROUV√â');
      console.log(`‚ùå Email recherch√©: ${DEBUG_CONFIG.USER_EMAIL}`);
      
      // Chercher des utilisateurs similaires
      const allUsers = await User.find({}, { email: 1, firstName: 1, lastName: 1 }).limit(10);
      console.log('\nüìã Utilisateurs disponibles en base:');
      allUsers.forEach(u => {
        console.log(`  - ${u.email} (${u.firstName} ${u.lastName})`);
      });
      
      return null;
    }
    
    console.log('‚úÖ UTILISATEUR TROUV√â:');
    console.log(`  üìß Email: ${user.email}`);
    console.log(`  üÜî User ID: ${user._id}`);
    console.log(`  üë§ Nom: ${user.firstName} ${user.lastName}`);
    console.log(`  üîê Actif: ${user.isActive}`);
    console.log(`  ‚úÖ V√©rifi√©: ${user.isVerified}`);
    console.log(`  üëë R√¥le: ${user.role || 'user'}`);
    console.log(`  üì± T√©l√©phone: ${user.phone || 'Non d√©fini'}`);
    console.log(`  üìÖ Cr√©√© le: ${user.createdAt}`);
    console.log(`  üîÑ Sessions actives: ${user.activeSessions?.length || 0}`);
    console.log(`  üîë Refresh tokens: ${user.refreshTokens?.length || 0}`);
    
    // Analyse des sessions actives
    if (user.activeSessions?.length > 0) {
      console.log('\nüîç D√âTAIL DES SESSIONS:');
      user.activeSessions.forEach((session, index) => {
        console.log(`  Session ${index + 1}:`);
        console.log(`    üÜî ID: ${session.sessionId}`);
        console.log(`    ‚úÖ Active: ${session.isActive}`);
        console.log(`    ‚è∞ Expire: ${session.expiresAt}`);
        console.log(`    ‚ùå Expir√©: ${session.expiresAt < new Date()}`);
        console.log(`    üì± Device: ${session.deviceInfo?.device || 'inconnu'}`);
        console.log(`    üåê IP: ${session.deviceInfo?.ip || 'inconnue'}`);
        console.log(`    üîç User-Agent: ${session.deviceInfo?.userAgent?.substring(0, 50) || 'inconnu'}...`);
        
        // Test du token si pr√©sent
        if (session.accessToken) {
          try {
            const verification = verifyAccessToken(session.accessToken);
            console.log(`    üé´ Token valide: ${verification.isValid}`);
            console.log(`    ‚è≥ Token expir√©: ${verification.expired}`);
            if (!verification.isValid) {
              console.log(`    ‚ùå Erreur token: ${verification.error}`);
            }
          } catch (e) {
            console.log(`    ‚ùå Erreur test token: ${e.message}`);
          }
        } else {
          console.log(`    ‚ö†Ô∏è Pas de token d'acc√®s`);
        }
        console.log('');
      });
    }
    
    console.log('');
    return user;
  } catch (error) {
    console.error('‚ùå ERREUR Analyse utilisateur:', error.message);
    return null;
  }
};

// ===================================================================
// 3. ANALYSE DU SOL
// ===================================================================

const analyzeSol = async () => {
  try {
    console.log('3Ô∏è‚É£ ANALYSE DU SOL:');
    
    // V√©rifier format de l'ID
    if (!mongoose.Types.ObjectId.isValid(DEBUG_CONFIG.SOL_ID)) {
      console.log('‚ùå ID SOL INVALIDE');
      console.log(`‚ùå ID fourni: ${DEBUG_CONFIG.SOL_ID}`);
      console.log('‚ùå L\'ID doit √™tre un ObjectId MongoDB valide (24 caract√®res hexad√©cimaux)');
      return null;
    }
    
    const sol = await Sol.findById(DEBUG_CONFIG.SOL_ID)
      .populate('creator', 'firstName lastName email phone')
      .populate('participants.user', 'firstName lastName email phone')
      .populate('rounds.recipient', 'firstName lastName')
      .populate('rounds.payments.payer', 'firstName lastName');
    
    if (!sol) {
      console.log('‚ùå SOL NON TROUV√â');
      console.log(`‚ùå ID recherch√©: ${DEBUG_CONFIG.SOL_ID}`);
      
      // Chercher des sols similaires
      const allSols = await Sol.find({}, { _id: 1, name: 1, creator: 1, status: 1 })
        .populate('creator', 'firstName lastName email')
        .limit(10)
        .sort({ createdAt: -1 });
        
      console.log('\nüìã Sols disponibles en base:');
      allSols.forEach(s => {
        console.log(`  - ${s._id} | ${s.name} | ${s.creator.email} | ${s.status}`);
      });
      
      return null;
    }
    
    console.log('‚úÖ SOL TROUV√â:');
    console.log(`  üÜî ID: ${sol._id}`);
    console.log(`  üìù Nom: ${sol.name}`);
    console.log(`  üìÑ Description: ${sol.description || 'Aucune'}`);
    console.log(`  üè∑Ô∏è Type: ${sol.type}`);
    console.log(`  üí∞ Montant: ${sol.contributionAmount} ${sol.currency}`);
    console.log(`  üë• Max participants: ${sol.maxParticipants}`);
    console.log(`  üìä Statut: ${sol.status}`);
    console.log(`  üîí Priv√©: ${sol.isPrivate}`);
    console.log(`  üìÖ Date cr√©ation: ${sol.createdAt}`);
    console.log(`  üìÖ Date modification: ${sol.updatedAt}`);
    console.log(`  üîë Code d'acc√®s: ${sol.accessCode}`);
    
    console.log('\nüë§ CR√âATEUR:');
    if (sol.creator) {
      console.log(`  üÜî Creator ID: ${sol.creator._id}`);
      console.log(`  üìß Email: ${sol.creator.email}`);
      console.log(`  üë§ Nom: ${sol.creator.firstName} ${sol.creator.lastName}`);
      console.log(`  üì± T√©l√©phone: ${sol.creator.phone || 'Non d√©fini'}`);
    } else {
      console.log('  ‚ùå Cr√©ateur non popul√© ou inexistant');
    }
    
    console.log('\nüë• PARTICIPANTS:');
    console.log(`  üìä Total: ${sol.participants.length}/${sol.maxParticipants}`);
    
    if (sol.participants.length > 0) {
      sol.participants.forEach((participant, index) => {
        console.log(`  Participant ${index + 1}:`);
        console.log(`    üÜî User ID: ${participant.user._id}`);
        console.log(`    üìß Email: ${participant.user.email}`);
        console.log(`    üë§ Nom: ${participant.user.firstName} ${participant.user.lastName}`);
        console.log(`    üì± T√©l√©phone: ${participant.user.phone || 'Non d√©fini'}`);
        console.log(`    üéØ Position: ${participant.position}`);
        console.log(`    üëë R√¥le: ${participant.role || 'participant'}`);
        console.log(`    üìÖ Rejoint le: ${participant.joinedAt}`);
        console.log(`    üí≥ Statut paiement: ${participant.paymentStatus || 'pending'}`);
        console.log(`    üí∞ A re√ßu: ${participant.hasReceived || false}`);
        console.log('');
      });
    } else {
      console.log('  ‚ö†Ô∏è Aucun participant trouv√©');
    }
    
    console.log('üìä ROUNDS:');
    console.log(`  üîÑ Total rounds: ${sol.rounds?.length || 0}`);
    if (sol.rounds?.length > 0) {
      sol.rounds.slice(0, 3).forEach((round, index) => {
        console.log(`  Round ${index + 1}:`);
        console.log(`    üìä Statut: ${round.status}`);
        console.log(`    üéØ B√©n√©ficiaire: ${round.recipient?.firstName} ${round.recipient?.lastName}`);
        console.log(`    üìÖ D√©but: ${round.startDate}`);
        console.log(`    üìÖ Fin: ${round.endDate}`);
        console.log(`    üí∞ Montant: ${round.totalAmount} ${sol.currency}`);
        console.log(`    üí≥ Paiements: ${round.payments?.length || 0}`);
      });
      if (sol.rounds.length > 3) {
        console.log(`    ... et ${sol.rounds.length - 3} autres rounds`);
      }
    }
    
    console.log('');
    return sol;
  } catch (error) {
    console.error('‚ùå ERREUR Analyse sol:', error.message);
    console.error('‚ùå Stack:', error.stack);
    return null;
  }
};

// ===================================================================
// 4. TEST D'ACC√àS AU SOL
// ===================================================================

const testSolAccess = async (user, sol) => {
  try {
    console.log('4Ô∏è‚É£ TEST D\'ACC√àS AU SOL:');
    
    if (!user || !sol) {
      console.log('‚ùå Utilisateur ou sol manquant pour le test d\'acc√®s');
      return false;
    }
    
    console.log(`üîç Test d'acc√®s pour l'utilisateur: ${user.email}`);
    console.log(`üîç Au sol: ${sol.name} (${sol._id})`);
    
    // Test 1: V√©rifier si l'utilisateur est le cr√©ateur
    const isCreator = sol.creator._id.toString() === user._id.toString();
    console.log(`\n1Ô∏è‚É£ EST CR√âATEUR:`);
    console.log(`  üîç Creator ID: ${sol.creator._id}`);
    console.log(`  üîç User ID:    ${user._id}`);
    console.log(`  ‚úÖ Match:      ${isCreator}`);
    
    // Test 2: V√©rifier si l'utilisateur est participant
    console.log(`\n2Ô∏è‚É£ EST PARTICIPANT:`);
    const participantMatch = sol.participants.find(p => {
      const match = p.user._id.toString() === user._id.toString();
      console.log(`  üîç Participant ${p.position}: ${p.user._id} ‚Üí ${match ? '‚úÖ' : '‚ùå'}`);
      return match;
    });
    
    const isParticipant = !!participantMatch;
    console.log(`  üìä R√©sultat: ${isParticipant ? '‚úÖ PARTICIPANT TROUV√â' : '‚ùå PAS PARTICIPANT'}`);
    
    if (participantMatch) {
      console.log(`  üéØ Position: ${participantMatch.position}`);
      console.log(`  üëë R√¥le: ${participantMatch.role || 'participant'}`);
      console.log(`  üìÖ Rejoint: ${participantMatch.joinedAt}`);
    }
    
    // Test 3: Logique d'acc√®s finale (comme dans le code)
    const hasAccess = isCreator || isParticipant;
    console.log(`\n3Ô∏è‚É£ LOGIQUE D'ACC√àS FINALE:`);
    console.log(`  üîç Est cr√©ateur: ${isCreator}`);
    console.log(`  üîç Est participant: ${isParticipant}`);
    console.log(`  ‚úÖ Acc√®s autoris√©: ${hasAccess ? '‚úÖ OUI' : '‚ùå NON'}`);
    
    // Test 4: Probl√®mes potentiels de population
    console.log(`\n4Ô∏è‚É£ V√âRIFICATION POPULATION:`);
    console.log(`  üîç Creator popul√©: ${sol.creator && sol.creator._id ? '‚úÖ' : '‚ùå'}`);
    console.log(`  üîç Participants popul√©s: ${sol.participants.every(p => p.user && p.user._id) ? '‚úÖ' : '‚ùå'}`);
    
    // Identifier les participants non popul√©s
    const unpopulatedParticipants = sol.participants.filter(p => !p.user || !p.user._id);
    if (unpopulatedParticipants.length > 0) {
      console.log(`  ‚ö†Ô∏è Participants non popul√©s: ${unpopulatedParticipants.length}`);
      unpopulatedParticipants.forEach((p, index) => {
        console.log(`    ${index + 1}: ${JSON.stringify(p.user)}`);
      });
    }
    
    console.log('');
    return hasAccess;
  } catch (error) {
    console.error('‚ùå ERREUR Test acc√®s sol:', error.message);
    return false;
  }
};

// ===================================================================
// 5. SIMULATION AUTHENTIFICATION
// ===================================================================

const simulateAuthentication = async (user) => {
  try {
    console.log('5Ô∏è‚É£ SIMULATION AUTHENTIFICATION:');
    
    if (!user) {
      console.log('‚ùå Pas d\'utilisateur pour simuler l\'authentification');
      return null;
    }
    
    // Chercher une session valide
    const validSession = user.activeSessions?.find(session => {
      if (!session.accessToken) return false;
      if (session.expiresAt < new Date()) return false;
      
      try {
        const verification = verifyAccessToken(session.accessToken);
        return verification.isValid;
      } catch (e) {
        return false;
      }
    });
    
    if (!validSession) {
      console.log('‚ö†Ô∏è Aucune session valide trouv√©e');
      console.log('üí° Suggestions:');
      console.log('  - Reconnectez-vous √† l\'application');
      console.log('  - V√©rifiez que votre token n\'est pas expir√©');
      console.log('  - Videz le cache de votre navigateur');
      
      return null;
    }
    
    console.log('‚úÖ SESSION VALIDE TROUV√âE:');
    console.log(`  üÜî Session ID: ${validSession.sessionId}`);
    console.log(`  ‚è∞ Expire: ${validSession.expiresAt}`);
    console.log(`  üì± Device: ${validSession.deviceInfo?.device}`);
    
    // Simuler la validation comme le ferait le middleware authenticate
    try {
      const authHeader = `Bearer ${validSession.accessToken}`;
      const validation = await authService.validateAccessToken(authHeader);
      
      console.log('\nüîê VALIDATION TOKEN:');
      console.log(`  ‚úÖ Succ√®s: ${validation.success}`);
      
      if (validation.success) {
        console.log(`  üÜî User ID: ${validation.user.id}`);
        console.log(`  üìß Email: ${validation.user.email}`);
        console.log(`  üë§ Nom: ${validation.user.firstName} ${validation.user.lastName}`);
        console.log(`  üëë R√¥le: ${validation.user.role}`);
        console.log(`  ‚úÖ V√©rifi√©: ${validation.user.isVerified}`);
        console.log(`  üîÑ Session: ${validation.session.sessionId}`);
        console.log(`  ‚è≥ Token expire bient√¥t: ${validation.tokenInfo.expiringSoon}`);
        
        return {
          userId: validation.user.id,
          email: validation.user.email,
          firstName: validation.user.firstName,
          lastName: validation.user.lastName,
          role: validation.user.role,
          isVerified: validation.user.isVerified,
          sessionId: validation.session.sessionId
        };
      } else {
        console.log(`  ‚ùå Erreur: ${validation.error}`);
      }
    } catch (e) {
      console.log(`  ‚ùå Erreur validation: ${e.message}`);
    }
    
    console.log('');
    return null;
  } catch (error) {
    console.error('‚ùå ERREUR Simulation authentification:', error.message);
    return null;
  }
};

// ===================================================================
// 6. DIAGNOSTIC COMPLET
// ===================================================================

const runCompleteDiagnostic = async () => {
  try {
    console.log('üöÄ D√âMARRAGE DIAGNOSTIC COMPLET...\n');
    
    // √âtape 1: Connexion DB
    const dbConnected = await connectDatabase();
    if (!dbConnected) {
      console.log('‚ùå Impossible de continuer sans connexion DB');
      return;
    }
    
    // √âtape 2: Analyse utilisateur
    const user = await analyzeUser();
    if (!user) {
      console.log('‚ùå Impossible de continuer sans utilisateur');
      return;
    }
    
    // √âtape 3: Analyse sol
    const sol = await analyzeSol();
    if (!sol) {
      console.log('‚ùå Impossible de continuer sans sol');
      return;
    }
    
    // √âtape 4: Test d'acc√®s
    const hasAccess = await testSolAccess(user, sol);
    
    // √âtape 5: Simulation auth
    const authenticatedUser = await simulateAuthentication(user);
    
    // R√âSUM√â FINAL
    console.log('üìä ========== R√âSUM√â DIAGNOSTIC ==========');
    console.log(`üéØ Sol: ${sol.name} (${sol._id})`);
    console.log(`üë§ Utilisateur: ${user.firstName} ${user.lastName} (${user.email})`);
    console.log(`‚úÖ Acc√®s th√©orique: ${hasAccess ? '‚úÖ AUTORIS√â' : '‚ùå REFUS√â'}`);
    console.log(`üîê Auth valide: ${authenticatedUser ? '‚úÖ OUI' : '‚ùå NON'}`);
    
    console.log('\nüîç DIAGNOSTIC:');
    
    if (hasAccess && authenticatedUser) {
      console.log('‚úÖ PAS DE PROBL√àME D√âTECT√â');
      console.log('üí° L\'erreur pourrait venir de:');
      console.log('  - Cache navigateur obsol√®te');
      console.log('  - Token expir√© c√¥t√© client');
      console.log('  - Probl√®me de session temporaire');
      console.log('\nüõ†Ô∏è SOLUTIONS:');
      console.log('  1. D√©connexion/reconnexion compl√®te');
      console.log('  2. Vider cache navigateur');
      console.log('  3. Utiliser mode incognito');
    } else if (!hasAccess) {
      console.log('‚ùå PROBL√àME D\'ACC√àS D√âTECT√â');
      console.log('üí° Causes possibles:');
      console.log('  - Vous n\'√™tes ni cr√©ateur ni participant de ce sol');
      console.log('  - Probl√®me de population des donn√©es');
      console.log('  - IDs corrompus en base');
      console.log('\nüõ†Ô∏è SOLUTIONS:');
      console.log('  1. V√©rifier que vous participez bien √† ce sol');
      console.log('  2. Utiliser le code d\'acc√®s pour rejoindre');
      console.log('  3. Contacter l\'admin pour v√©rifier les donn√©es');
    } else if (!authenticatedUser) {
      console.log('‚ùå PROBL√àME D\'AUTHENTIFICATION D√âTECT√â');
      console.log('üí° Causes possibles:');
      console.log('  - Toutes vos sessions ont expir√©');
      console.log('  - Tokens corrompus');
      console.log('  - Probl√®me avec authService');
      console.log('\nüõ†Ô∏è SOLUTIONS:');
      console.log('  1. Reconnexion compl√®te');
      console.log('  2. Supprimer toutes les sessions expir√©es');
      console.log('  3. V√©rifier la configuration JWT');
    }
    
    console.log('\n===========================================');
    
  } catch (error) {
    console.error('‚ùå ERREUR DIAGNOSTIC COMPLET:', error.message);
    console.error('‚ùå Stack:', error.stack);
  } finally {
    // Fermer la connexion DB
    if (mongoose.connection.readyState === 1) {
      await mongoose.connection.close();
      console.log('‚úÖ Connexion MongoDB ferm√©e');
    }
  }
};

// ===================================================================
// LANCEMENT DU SCRIPT
// ===================================================================

// V√©rifier les arguments
if (process.argv.length < 4 && !DEBUG_CONFIG.SOL_ID && !DEBUG_CONFIG.USER_EMAIL) {
  console.log('Usage: node src/scripts/debugSolAccess.js [SOL_ID] [USER_EMAIL]');
  console.log('Exemple: node src/scripts/debugSolAccess.js 66d4a49ba83fa0d4c1fbe152 user@example.com');
  process.exit(1);
}

// Ex√©cuter le diagnostic
runCompleteDiagnostic()
  .then(() => {
    console.log('\nüèÅ Diagnostic termin√©');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\nüí• Erreur fatale:', error.message);
    process.exit(1);
  });

// ===================================================================
// EXPORT POUR UTILISATION MODULAIRE
// ===================================================================

module.exports = {
  connectDatabase,
  analyzeUser,
  analyzeSol,
  testSolAccess,
  simulateAuthentication,
  runCompleteDiagnostic,
  DEBUG_CONFIG
};