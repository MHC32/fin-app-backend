// üêõ DEBUG BUG CONTR√îLEUR getSolById - FINAPP HAITI
// Cr√©er ce fichier: src/scripts/debugControllerBug.js
// 
// Ce script reproduit exactement la logique du contr√¥leur pour identifier le bug
// Usage: node src/scripts/debugControllerBug.js

const mongoose = require('mongoose');
const Sol = require('../models/Sol');
const User = require('../models/User');
const { verifyAccessToken } = require('../config/jwt');
const authService = require('../services/authService');
require('dotenv').config({ path: '.env.local' });

const debugControllerBug = async () => {
  try {
    console.log('üêõ DEBUG BUG CONTR√îLEUR getSolById...\n');
    
    // Connexion MongoDB
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ MongoDB connect√©\n');
    
    const userEmail = 'hantzmichaelchery6@gmail.com';
    const solId = '68d4a49ba83fa0d4c1fbe151';
    
    // 1. SIMULER L'AUTHENTIFICATION MIDDLEWARE
    console.log('1Ô∏è‚É£ SIMULATION MIDDLEWARE AUTHENTICATE:');
    
    const user = await User.findOne({ email: userEmail });
    const validSession = user.activeSessions.find(session => {
      if (!session.accessToken) return false;
      if (session.expiresAt < new Date()) return false;
      
      try {
        const verification = verifyAccessToken(session.accessToken);
        return verification.isValid && !verification.expired;
      } catch (e) {
        return false;
      }
    });
    
    const token = validSession.accessToken;
    const authHeader = `Bearer ${token}`;
    
    // Validation comme le middleware
    const validation = await authService.validateAccessToken(authHeader);
    
    console.log('‚úÖ Middleware simulation:');
    console.log(`  Success: ${validation.success}`);
    console.log(`  User ID: ${validation.user.id}`);
    console.log(`  Email: ${validation.user.email}`);
    
    // Cr√©er req.user comme le middleware
    const reqUser = {
      userId: validation.user.id,
      email: validation.user.email,
      firstName: validation.user.firstName,
      lastName: validation.user.lastName,
      role: validation.user.role,
      isVerified: validation.user.isVerified,
      sessionId: validation.session.sessionId
    };
    
    console.log('\n2Ô∏è‚É£ SIMULATION CONTR√îLEUR getSolById:');
    console.log(`  Sol ID demand√©: ${solId}`);
    console.log(`  req.user.userId: ${reqUser.userId}`);
    
    // REPRODUIRE EXACTEMENT LA LOGIQUE DU CONTR√îLEUR
    const includeHistory = true; // ?includeHistory=true
    
    // √âtape 1: R√©cup√©rer le sol (comme dans le contr√¥leur)
    console.log('\nüîç √âtape 1: R√©cup√©ration du sol...');
    
    const sol = await Sol.findById(solId)
      .populate('creator', 'firstName lastName email phone')
      .populate('participants.user', 'firstName lastName email phone')
      .populate('rounds.recipient', 'firstName lastName')
      .populate('rounds.payments.payer', 'firstName lastName');
      
    if (!sol) {
      console.log('‚ùå Sol non trouv√©');
      return;
    }
    
    console.log('‚úÖ Sol trouv√©');
    console.log(`  Sol creator: ${sol.creator}`);
    console.log(`  Sol creator type: ${typeof sol.creator}`);
    console.log(`  Sol creator._id: ${sol.creator?._id}`);
    console.log(`  Sol participants: ${sol.participants.length}`);
    
    // √âtape 2: V√©rifier l'acc√®s (EXACTEMENT comme dans le contr√¥leur)
    console.log('\nüîç √âtape 2: V√©rification acc√®s...');
    
    console.log('üìã D√âTAILS DE V√âRIFICATION:');
    console.log(`  sol.creator: ${sol.creator}`);
    console.log(`  sol.creator._id: ${sol.creator._id}`);
    console.log(`  sol.creator._id.toString(): ${sol.creator._id.toString()}`);
    console.log(`  req.user.userId: ${reqUser.userId}`);
    console.log(`  typeof req.user.userId: ${typeof reqUser.userId}`);
    
    // Test cr√©ateur (exactement comme dans le contr√¥leur)
    const isCreatorCheck = sol.creator._id.toString() === reqUser.userId;
    console.log(`  üîç Test cr√©ateur: ${sol.creator._id.toString()} === ${reqUser.userId} ‚Üí ${isCreatorCheck}`);
    
    // Test participants (exactement comme dans le contr√¥leur)
    console.log('\nüìã TEST PARTICIPANTS:');
    console.log(`  Nombre de participants: ${sol.participants.length}`);
    
    const participantCheck = sol.participants.some(p => {
      console.log(`    Participant: ${p.user._id}`);
      console.log(`    Participant type: ${typeof p.user._id}`);
      console.log(`    p.user._id.toString(): ${p.user._id.toString()}`);
      console.log(`    req.user.userId: ${reqUser.userId}`);
      
      const match = p.user._id.toString() === reqUser.userId;
      console.log(`    Match: ${match}`);
      
      return match;
    });
    
    console.log(`  üîç Test participants: ${participantCheck}`);
    
    // Logique finale (exactement comme dans le contr√¥leur)
    const hasAccess = isCreatorCheck || participantCheck;
    console.log(`\nüéØ LOGIQUE FINALE:`);
    console.log(`  isCreator: ${isCreatorCheck}`);
    console.log(`  isParticipant: ${participantCheck}`);
    console.log(`  hasAccess: ${hasAccess}`);
    
    if (!hasAccess) {
      console.log('\n‚ùå ACC√àS REFUS√â - COMME DANS LE CONTR√îLEUR');
      console.log('üîç CAUSES POSSIBLES:');
      
      // Analyse d√©taill√©e des types
      console.log('\nüìä ANALYSE DES TYPES:');
      console.log(`  sol.creator._id type: ${typeof sol.creator._id}`);
      console.log(`  sol.creator._id constructor: ${sol.creator._id.constructor.name}`);
      console.log(`  req.user.userId type: ${typeof reqUser.userId}`);
      
      // V√©rifier si c'est un probl√®me de type ObjectId vs String
      const creatorIdString = sol.creator._id.toString();
      const userIdString = reqUser.userId.toString();
      
      console.log('\nüîç COMPARAISON FORC√âE STRING:');
      console.log(`  creatorIdString: "${creatorIdString}"`);
      console.log(`  userIdString: "${userIdString}"`);
      console.log(`  Match forc√© string: ${creatorIdString === userIdString}`);
      
      // V√©rifier les longueurs
      console.log('\nüìè LONGUEURS:');
      console.log(`  creatorIdString length: ${creatorIdString.length}`);
      console.log(`  userIdString length: ${userIdString.length}`);
      
      // Comparer caract√®re par caract√®re si diff√©rent
      if (creatorIdString !== userIdString) {
        console.log('\nüîç DIFF√âRENCES CARACT√àRE PAR CARACT√àRE:');
        for (let i = 0; i < Math.max(creatorIdString.length, userIdString.length); i++) {
          const char1 = creatorIdString[i] || 'UNDEFINED';
          const char2 = userIdString[i] || 'UNDEFINED';
          if (char1 !== char2) {
            console.log(`    Position ${i}: "${char1}" vs "${char2}"`);
          }
        }
      }
      
      // V√©rifier avec mongoose.Types.ObjectId
      console.log('\nüîç TEST AVEC MONGOOSE ObjectId:');
      try {
        const creatorObjectId = new mongoose.Types.ObjectId(sol.creator._id);
        const userObjectId = new mongoose.Types.ObjectId(reqUser.userId);
        
        console.log(`  Creator ObjectId: ${creatorObjectId}`);
        console.log(`  User ObjectId: ${userObjectId}`);
        console.log(`  ObjectId equals: ${creatorObjectId.equals(userObjectId)}`);
      } catch (e) {
        console.log(`  ‚ùå Erreur ObjectId: ${e.message}`);
      }
      
    } else {
      console.log('\n‚úÖ ACC√àS AUTORIS√â - PAS DE BUG D√âTECT√â');
    }
    
    // 3. COMPARAISON AVEC getUserSols
    console.log('\n3Ô∏è‚É£ COMPARAISON AVEC getUserSols:');
    
    // Test de la logique getUserSols
    const getUserSolsFilter = {
      $or: [
        { creator: reqUser.userId },
        { 'participants.user': reqUser.userId }
      ]
    };
    
    console.log('üîç Filtre getUserSols:');
    console.log(JSON.stringify(getUserSolsFilter, null, 2));
    
    const solsFromGetUserSols = await Sol.find(getUserSolsFilter)
      .populate('creator', 'firstName lastName email')
      .populate('participants.user', 'firstName lastName email');
    
    console.log(`üìä R√©sultats getUserSols: ${solsFromGetUserSols.length} sol(s)`);
    
    if (solsFromGetUserSols.length > 0) {
      solsFromGetUserSols.forEach((s, index) => {
        console.log(`  Sol ${index + 1}: ${s._id} - ${s.name}`);
      });
    }
    
    // Recommandations finales
    console.log('\nüõ†Ô∏è RECOMMANDATIONS:');
    
    if (!hasAccess) {
      console.log('‚ùå BUG CONFIRM√â dans getSolById');
      console.log('üí° Probl√®mes possibles:');
      console.log('  1. Types incompatibles (ObjectId vs String)');
      console.log('  2. req.user.userId corrompu par le middleware');
      console.log('  3. Population des donn√©es incorrecte');
      console.log('  4. Diff√©rence de logique entre getUserSols et getSolById');
      
      console.log('\nüîß SOLUTIONS:');
      console.log('  1. Utiliser mongoose.Types.ObjectId.equals() dans getSolById');
      console.log('  2. V√©rifier le middleware authenticate');
      console.log('  3. Uniformiser la logique entre getUserSols et getSolById');
    } else {
      console.log('‚úÖ Logique correcte d√©tect√©e');
      console.log('üí° Le bug pourrait venir d\'ailleurs');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    console.error('Stack:', error.stack);
  } finally {
    await mongoose.connection.close();
    console.log('\n‚úÖ Debug termin√©');
  }
};

debugControllerBug();