// src/cron/cleanupNotifications.js
// Cron job pour nettoyage automatique des notifications et maintenance DB
// S'ex√©cute tous les dimanches √† 2h du matin pour optimiser performances

const Notification = require('../models/Notification');
const HabitInsight = require('../models/HabitInsight');
const mongoose = require('mongoose');

// ===================================================================
// CONFIGURATION
// ===================================================================

/**
 * Configuration du nettoyage automatique
 */
const CONFIG = {
  // R√©tention des notifications (en jours)
  RETENTION_PERIODS: {
    read: 30,           // Notifications lues : 30 jours
    dismissed: 7,       // Notifications rejet√©es : 7 jours
    acted: 90,          // Notifications actionn√©es : 90 jours (historique)
    failed: 3,          // Notifications √©chou√©es : 3 jours
    expired: 1          // Notifications expir√©es : 1 jour
  },

  // R√©tention insights IA (en jours)
  INSIGHT_RETENTION: {
    viewed: 180,        // Insights vus : 6 mois
    dismissed: 30,      // Insights rejet√©s : 1 mois
    expired: 7,         // Insights expir√©s : 1 semaine
    obsolete: 1         // Insights obsol√®tes : 1 jour
  },

  // Seuils de performance
  PERFORMANCE_THRESHOLDS: {
    maxNotificationsPerUser: 1000,  // Max notifications par user
    maxExecutionTime: 300000,       // Max 5 minutes d'ex√©cution
    batchSize: 500                  // Traitement par batch de 500
  },

  // Optimisations DB
  DB_MAINTENANCE: {
    rebuildIndexes: true,           // Reconstruire index
    analyzeCollections: true,       // Analyser collections
    compactCollections: false       // Compacter (dangereux en prod)
  }
};

// ===================================================================
// FONCTION PRINCIPALE
// ===================================================================

/**
 * Fonction principale de nettoyage ex√©cut√©e par le cron job
 * Nettoie notifications + insights + optimise DB
 */
async function performDatabaseCleanup() {
  console.log('\nüßπ D√âBUT - Nettoyage automatique base de donn√©es'.cyan.bold);
  console.log('‚è∞ Heure d\'ex√©cution:', new Date().toLocaleString('fr-HT'));
  console.log('üìÖ Jour de la semaine:', getDayName(new Date().getDay()));

  const startTime = Date.now();
  const stats = {
    notifications: {
      analyzed: 0,
      deleted: 0,
      errors: 0,
      byStatus: {}
    },
    insights: {
      analyzed: 0,
      deleted: 0,
      errors: 0
    },
    database: {
      indexesRebuilt: 0,
      collectionsAnalyzed: 0,
      errors: 0
    },
    performance: {
      executionTime: 0,
      memoryUsed: 0,
      dbSizeReduced: 0
    }
  };

  try {
    // Phase 1: Nettoyage notifications
    console.log('\nüì± PHASE 1: Nettoyage notifications');
    stats.notifications = await cleanupNotifications();

    // Phase 2: Nettoyage insights IA
    console.log('\nü§ñ PHASE 2: Nettoyage insights IA');
    stats.insights = await cleanupHabitInsights();

    // Phase 3: Maintenance base de donn√©es
    console.log('\nüîß PHASE 3: Maintenance base de donn√©es');
    stats.database = await performDatabaseMaintenance();

    // Phase 4: Analyse performance utilisateurs
    console.log('\nüë• PHASE 4: Analyse performance utilisateurs');
    await analyzeUserNotificationLoad();

    // Calculer m√©triques finales
    stats.performance.executionTime = Date.now() - startTime;
    stats.performance.memoryUsed = process.memoryUsage().heapUsed / 1024 / 1024; // MB

    // Afficher r√©sum√©
    displayCleanupSummary(stats);

    return stats;

  } catch (error) {
    console.error('‚ùå ERREUR CRITIQUE - performDatabaseCleanup:', error.message);
    throw error;
  } finally {
    console.log('üèÅ FIN - Nettoyage base de donn√©es\n'.cyan.bold);
  }
}

// ===================================================================
// NETTOYAGE NOTIFICATIONS
// ===================================================================

/**
 * Nettoie les anciennes notifications selon politiques de r√©tention
 */
async function cleanupNotifications() {
  const stats = { analyzed: 0, deleted: 0, errors: 0, byStatus: {} };

  try {
    console.log('üîç Analyse des notifications √† nettoyer...');

    // Calculer dates de coupure pour chaque statut
    const cutoffDates = calculateNotificationCutoffDates();
    
    console.log('üìÖ Dates de coupure par statut:');
    Object.entries(cutoffDates).forEach(([status, date]) => {
      console.log(`  ‚Ä¢ ${status}: avant ${date.toLocaleDateString('fr-HT')}`);
    });

    // Traiter chaque statut s√©par√©ment
    for (const [status, cutoffDate] of Object.entries(cutoffDates)) {
      try {
        const statusStats = await cleanupNotificationsByStatus(status, cutoffDate);
        stats.analyzed += statusStats.analyzed;
        stats.deleted += statusStats.deleted;
        stats.byStatus[status] = statusStats;
        
        console.log(`  ‚úÖ ${status}: ${statusStats.deleted} supprim√©es sur ${statusStats.analyzed} analys√©es`);
        
      } catch (error) {
        console.error(`  ‚ùå Erreur nettoyage ${status}:`, error.message);
        stats.errors++;
      }
    }

    // Nettoyer notifications orphelines (users supprim√©s)
    const orphanStats = await cleanupOrphanNotifications();
    stats.deleted += orphanStats.deleted;
    console.log(`  üßπ Orphelines: ${orphanStats.deleted} supprim√©es`);

  } catch (error) {
    console.error('‚ùå Erreur cleanupNotifications:', error.message);
    stats.errors++;
  }

  return stats;
}

/**
 * Calcule les dates de coupure pour chaque statut
 */
function calculateNotificationCutoffDates() {
  const now = new Date();
  const cutoffDates = {};

  Object.entries(CONFIG.RETENTION_PERIODS).forEach(([status, days]) => {
    const cutoffDate = new Date(now);
    cutoffDate.setDate(now.getDate() - days);
    cutoffDate.setHours(0, 0, 0, 0);
    cutoffDates[status] = cutoffDate;
  });

  return cutoffDates;
}

/**
 * Nettoie notifications par statut sp√©cifique
 */
async function cleanupNotificationsByStatus(status, cutoffDate) {
  const stats = { analyzed: 0, deleted: 0 };

  try {
    // Compter notifications √† supprimer
    const countQuery = {
      status: status,
      createdAt: { $lt: cutoffDate }
    };

    stats.analyzed = await Notification.countDocuments(countQuery);

    if (stats.analyzed === 0) {
      return stats;
    }

    // Supprimer par batch pour √©viter surcharge
    const batchSize = CONFIG.PERFORMANCE_THRESHOLDS.batchSize;
    let deletedTotal = 0;

    while (true) {
      const batch = await Notification.find(countQuery)
        .limit(batchSize)
        .select('_id');

      if (batch.length === 0) break;

      const ids = batch.map(doc => doc._id);
      const deleteResult = await Notification.deleteMany({ _id: { $in: ids } });
      
      deletedTotal += deleteResult.deletedCount;
      
      // Pause entre batches pour √©viter surcharge
      if (batch.length === batchSize) {
        await new Promise(resolve => setTimeout(resolve, 100)); // 100ms pause
      }
    }

    stats.deleted = deletedTotal;

  } catch (error) {
    console.error(`Erreur cleanupNotificationsByStatus ${status}:`, error.message);
    throw error;
  }

  return stats;
}

/**
 * Supprime notifications orphelines (utilisateurs supprim√©s)
 */
async function cleanupOrphanNotifications() {
  const stats = { deleted: 0 };

  try {
    // Utiliser aggregation pour trouver notifications orphelines
    const orphanNotifications = await Notification.aggregate([
      {
        $lookup: {
          from: 'users',
          localField: 'user',
          foreignField: '_id',
          as: 'userDoc'
        }
      },
      {
        $match: {
          userDoc: { $size: 0 } // Aucun user correspondant trouv√©
        }
      },
      {
        $project: { _id: 1 }
      }
    ]);

    if (orphanNotifications.length > 0) {
      const orphanIds = orphanNotifications.map(doc => doc._id);
      const deleteResult = await Notification.deleteMany({ _id: { $in: orphanIds } });
      stats.deleted = deleteResult.deletedCount;
    }

  } catch (error) {
    console.error('Erreur cleanupOrphanNotifications:', error.message);
  }

  return stats;
}

// ===================================================================
// NETTOYAGE INSIGHTS IA
// ===================================================================

/**
 * Nettoie les anciens insights IA selon politiques de r√©tention
 */
async function cleanupHabitInsights() {
  const stats = { analyzed: 0, deleted: 0, errors: 0 };

  try {
    console.log('ü§ñ Analyse des insights IA √† nettoyer...');

    // Calculer dates de coupure
    const cutoffDates = calculateInsightCutoffDates();
    
    console.log('üìÖ Dates de coupure insights:');
    Object.entries(cutoffDates).forEach(([status, date]) => {
      console.log(`  ‚Ä¢ ${status}: avant ${date.toLocaleDateString('fr-HT')}`);
    });

    // Nettoyer par statut
    for (const [status, cutoffDate] of Object.entries(cutoffDates)) {
      try {
        const query = {
          status: status,
          createdAt: { $lt: cutoffDate }
        };

        const count = await HabitInsight.countDocuments(query);
        stats.analyzed += count;

        if (count > 0) {
          const deleteResult = await HabitInsight.deleteMany(query);
          stats.deleted += deleteResult.deletedCount;
          console.log(`  ‚úÖ ${status}: ${deleteResult.deletedCount} insights supprim√©s`);
        }

      } catch (error) {
        console.error(`  ‚ùå Erreur nettoyage insights ${status}:`, error.message);
        stats.errors++;
      }
    }

    // Nettoyer insights obsol√®tes (mod√®le ML chang√©)
    const obsoleteStats = await cleanupObsoleteInsights();
    stats.deleted += obsoleteStats.deleted;
    console.log(`  üßπ Obsol√®tes: ${obsoleteStats.deleted} insights supprim√©s`);

  } catch (error) {
    console.error('‚ùå Erreur cleanupHabitInsights:', error.message);
    stats.errors++;
  }

  return stats;
}

/**
 * Calcule dates de coupure pour insights
 */
function calculateInsightCutoffDates() {
  const now = new Date();
  const cutoffDates = {};

  Object.entries(CONFIG.INSIGHT_RETENTION).forEach(([status, days]) => {
    const cutoffDate = new Date(now);
    cutoffDate.setDate(now.getDate() - days);
    cutoffDate.setHours(0, 0, 0, 0);
    cutoffDates[status] = cutoffDate;
  });

  return cutoffDates;
}

/**
 * Supprime insights obsol√®tes (ancienne version ML)
 */
async function cleanupObsoleteInsights() {
  const stats = { deleted: 0 };

  try {
    // Supprimer insights avec version ML obsol√®te
    const currentMLVersion = '2.0.0'; // Version actuelle du ML
    
    const deleteResult = await HabitInsight.deleteMany({
      modelVersion: { $ne: currentMLVersion, $exists: true }
    });

    stats.deleted = deleteResult.deletedCount;

  } catch (error) {
    console.error('Erreur cleanupObsoleteInsights:', error.message);
  }

  return stats;
}

// ===================================================================
// MAINTENANCE BASE DE DONN√âES
// ===================================================================

/**
 * Effectue maintenance optimisation base de donn√©es
 */
async function performDatabaseMaintenance() {
  const stats = { indexesRebuilt: 0, collectionsAnalyzed: 0, errors: 0 };

  try {
    if (CONFIG.DB_MAINTENANCE.rebuildIndexes) {
      console.log('üîß Reconstruction des index...');
      await rebuildDatabaseIndexes();
      stats.indexesRebuilt++;
      console.log('  ‚úÖ Index reconstruits');
    }

    if (CONFIG.DB_MAINTENANCE.analyzeCollections) {
      console.log('üìä Analyse des collections...');
      const analysisResults = await analyzeCollections();
      stats.collectionsAnalyzed = analysisResults.length;
      console.log(`  ‚úÖ ${analysisResults.length} collections analys√©es`);
    }

    // Statistiques base de donn√©es
    const dbStats = await getDatabaseStats();
    console.log('üìà Statistiques DB:');
    console.log(`  ‚Ä¢ Collections: ${dbStats.collections}`);
    console.log(`  ‚Ä¢ Documents total: ${dbStats.totalDocuments}`);
    console.log(`  ‚Ä¢ Taille DB: ${(dbStats.dataSize / 1024 / 1024).toFixed(2)} MB`);

  } catch (error) {
    console.error('‚ùå Erreur performDatabaseMaintenance:', error.message);
    stats.errors++;
  }

  return stats;
}

/**
 * Reconstruit les index pour optimiser performance
 */
async function rebuildDatabaseIndexes() {
  try {
    const collections = ['notifications', 'habitinsights'];
    
    for (const collectionName of collections) {
      try {
        const collection = mongoose.connection.db.collection(collectionName);
        await collection.reIndex();
        console.log(`    ‚úÖ Index ${collectionName} reconstruits`);
      } catch (error) {
        console.error(`    ‚ùå Erreur index ${collectionName}:`, error.message);
      }
    }

  } catch (error) {
    console.error('Erreur rebuildDatabaseIndexes:', error.message);
    throw error;
  }
}

/**
 * Analyse les collections pour d√©tecter probl√®mes
 */
async function analyzeCollections() {
  const results = [];

  try {
    const collections = ['notifications', 'habitinsights', 'users'];
    
    for (const collectionName of collections) {
      try {
        const collection = mongoose.connection.db.collection(collectionName);
        const stats = await collection.stats();
        
        const analysis = {
          collection: collectionName,
          documents: stats.count,
          size: stats.size,
          avgDocSize: stats.avgObjSize,
          indexes: stats.nindexes
        };

        results.push(analysis);
        console.log(`    üìä ${collectionName}: ${stats.count} docs, ${(stats.size/1024/1024).toFixed(2)} MB`);

      } catch (error) {
        console.error(`    ‚ùå Erreur analyse ${collectionName}:`, error.message);
      }
    }

  } catch (error) {
    console.error('Erreur analyzeCollections:', error.message);
  }

  return results;
}

/**
 * R√©cup√®re statistiques g√©n√©rales base de donn√©es
 */
async function getDatabaseStats() {
  try {
    const dbStats = await mongoose.connection.db.stats();
    
    return {
      collections: dbStats.collections,
      totalDocuments: dbStats.objects,
      dataSize: dbStats.dataSize,
      storageSize: dbStats.storageSize,
      indexes: dbStats.indexes
    };

  } catch (error) {
    console.error('Erreur getDatabaseStats:', error.message);
    return {
      collections: 0,
      totalDocuments: 0,
      dataSize: 0,
      storageSize: 0,
      indexes: 0
    };
  }
}

// ===================================================================
// ANALYSE PERFORMANCE UTILISATEURS
// ===================================================================

/**
 * Analyse la charge de notifications par utilisateur
 */
async function analyzeUserNotificationLoad() {
  try {
    console.log('üë• Analyse charge notifications par utilisateur...');

    // Trouver utilisateurs avec trop de notifications
    const heavyUsers = await Notification.aggregate([
      {
        $group: {
          _id: '$user',
          notificationCount: { $sum: 1 },
          oldestNotification: { $min: '$createdAt' },
          newestNotification: { $max: '$createdAt' }
        }
      },
      {
        $match: {
          notificationCount: { $gt: CONFIG.PERFORMANCE_THRESHOLDS.maxNotificationsPerUser }
        }
      },
      { $sort: { notificationCount: -1 } },
      { $limit: 10 }
    ]);

    if (heavyUsers.length > 0) {
      console.log(`‚ö†Ô∏è  ${heavyUsers.length} utilisateurs avec charge √©lev√©e:`);
      heavyUsers.forEach((user, index) => {
        console.log(`  ${index + 1}. User ${user._id}: ${user.notificationCount} notifications`);
      });

      // Option: Nettoyer automatiquement users avec charge excessive
      await cleanupHeavyUserNotifications(heavyUsers);
    } else {
      console.log('‚úÖ Aucun utilisateur avec charge excessive');
    }

  } catch (error) {
    console.error('Erreur analyzeUserNotificationLoad:', error.message);
  }
}

/**
 * Nettoie notifications des utilisateurs avec charge excessive
 */
async function cleanupHeavyUserNotifications(heavyUsers) {
  try {
    console.log('üßπ Nettoyage utilisateurs charge excessive...');

    for (const user of heavyUsers) {
      // Garder seulement les 100 notifications les plus r√©centes
      const keepLimit = 100;
      
      const notificationsToDelete = await Notification.find({ user: user._id })
        .sort({ createdAt: -1 })
        .skip(keepLimit)
        .select('_id');

      if (notificationsToDelete.length > 0) {
        const ids = notificationsToDelete.map(n => n._id);
        const deleteResult = await Notification.deleteMany({ _id: { $in: ids } });
        
        console.log(`  ‚úÖ User ${user._id}: ${deleteResult.deletedCount} anciennes notifications supprim√©es`);
      }
    }

  } catch (error) {
    console.error('Erreur cleanupHeavyUserNotifications:', error.message);
  }
}

// ===================================================================
// AFFICHAGE R√âSULTATS
// ===================================================================

/**
 * Affiche r√©sum√© complet du nettoyage
 */
function displayCleanupSummary(stats) {
  console.log('\n' + '='.repeat(70).green);
  console.log('üìä R√âSUM√â - NETTOYAGE BASE DE DONN√âES'.bold.green);
  console.log('='.repeat(70).green);

  // Notifications
  console.log('\nüì± NOTIFICATIONS:'.cyan.bold);
  console.log(`  üìä Analys√©es: ${stats.notifications.analyzed}`.cyan);
  console.log(`  üóëÔ∏è  Supprim√©es: ${stats.notifications.deleted}`.green);
  console.log(`  ‚ùå Erreurs: ${stats.notifications.errors}`.red);
  
  if (Object.keys(stats.notifications.byStatus).length > 0) {
    console.log('  üìã D√©tail par statut:');
    Object.entries(stats.notifications.byStatus).forEach(([status, data]) => {
      if (data.deleted > 0) {
        console.log(`    ‚Ä¢ ${status}: ${data.deleted} supprim√©es`);
      }
    });
  }

  // Insights IA
  console.log('\nü§ñ INSIGHTS IA:'.cyan.bold);
  console.log(`  üìä Analys√©s: ${stats.insights.analyzed}`.cyan);
  console.log(`  üóëÔ∏è  Supprim√©s: ${stats.insights.deleted}`.green);
  console.log(`  ‚ùå Erreurs: ${stats.insights.errors}`.red);

  // Base de donn√©es
  console.log('\nüîß MAINTENANCE DB:'.cyan.bold);
  console.log(`  üî® Index reconstruits: ${stats.database.indexesRebuilt}`.blue);
  console.log(`  üìä Collections analys√©es: ${stats.database.collectionsAnalyzed}`.blue);
  console.log(`  ‚ùå Erreurs: ${stats.database.errors}`.red);

  // Performance
  console.log('\n‚ö° PERFORMANCE:'.cyan.bold);
  console.log(`  ‚è±Ô∏è  Temps d'ex√©cution: ${(stats.performance.executionTime / 1000).toFixed(2)}s`.yellow);
  console.log(`  üß† M√©moire utilis√©e: ${stats.performance.memoryUsed.toFixed(2)} MB`.yellow);

  // R√©sum√© final
  const totalDeleted = stats.notifications.deleted + stats.insights.deleted;
  const totalErrors = stats.notifications.errors + stats.insights.errors + stats.database.errors;

  console.log('\n' + '='.repeat(70).green);
  
  if (totalDeleted > 0) {
    console.log(`‚úÖ ${totalDeleted} √©l√©ments supprim√©s - Base de donn√©es optimis√©e !`.bold.green);
  } else {
    console.log('‚ÑπÔ∏è  Base de donn√©es d√©j√† propre - Aucun nettoyage n√©cessaire.'.yellow);
  }
  
  if (totalErrors > 0) {
    console.log(`‚ö†Ô∏è  ${totalErrors} erreur(s) d√©tect√©e(s) - V√©rifier les logs.`.bold.red);
  }

  console.log('üèÅ Nettoyage termin√© avec succ√®s !'.bold.green);
}

// ===================================================================
// UTILITAIRES
// ===================================================================

/**
 * Retourne nom du jour en fran√ßais
 */
function getDayName(dayIndex) {
  const days = ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'];
  return days[dayIndex] || 'Inconnu';
}

/**
 * Calcule statistiques rapides pour monitoring
 */
async function getQuickCleanupStats() {
  try {
    const now = new Date();
    const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
    const oneMonthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);

    const [
      totalNotifications,
      oldNotifications,
      totalInsights,
      oldInsights
    ] = await Promise.all([
      Notification.countDocuments({}),
      Notification.countDocuments({ 
        status: 'read', 
        createdAt: { $lt: oneMonthAgo } 
      }),
      HabitInsight.countDocuments({}),
      HabitInsight.countDocuments({ 
        status: 'viewed', 
        createdAt: { $lt: oneMonthAgo } 
      })
    ]);

    return {
      notifications: {
        total: totalNotifications,
        eligibleForCleanup: oldNotifications
      },
      insights: {
        total: totalInsights,
        eligibleForCleanup: oldInsights
      },
      estimatedCleanupSize: oldNotifications + oldInsights,
      timestamp: new Date()
    };

  } catch (error) {
    console.error('Erreur getQuickCleanupStats:', error.message);
    return null;
  }
}

// ===================================================================
// EXPORT
// ===================================================================

module.exports = performDatabaseCleanup;

// Export fonctions utilitaires pour tests
module.exports.utils = {
  cleanupNotifications,
  cleanupHabitInsights,
  performDatabaseMaintenance,
  analyzeUserNotificationLoad,
  getQuickCleanupStats,
  CONFIG
};

/**
 * ===================================================================
 * üìö DOCUMENTATION TECHNIQUE - CLEANUP NOTIFICATIONS
 * ===================================================================
 * 
 * OBJECTIF :
 * Maintient la base de donn√©es propre et performante en supprimant
 * automatiquement les anciennes donn√©es selon politiques de r√©tention.
 * 
 * ===================================================================
 * 
 * üîÑ FLUX D'EX√âCUTION :
 * 
 * PHASE 1 - Nettoyage Notifications :
 * ‚Ä¢ Supprime notifications lues > 30 jours
 * ‚Ä¢ Supprime notifications rejet√©es > 7 jours
 * ‚Ä¢ Garde notifications actionn√©es 90 jours (historique)
 * ‚Ä¢ Supprime notifications √©chou√©es > 3 jours
 * ‚Ä¢ Supprime notifications orphelines (users supprim√©s)
 * 
 * PHASE 2 - Nettoyage Insights IA :
 * ‚Ä¢ Supprime insights vus > 6 mois
 * ‚Ä¢ Supprime insights rejet√©s > 1 mois
 * ‚Ä¢ Supprime insights expir√©s > 1 semaine
 * ‚Ä¢ Supprime insights obsol√®tes (ancien ML)
 * 
 * PHASE 3 - Maintenance DB :
 * ‚Ä¢ Reconstruit index pour performance
 * ‚Ä¢ Analyse collections pour d√©tecter probl√®mes
 * ‚Ä¢ Collecte statistiques usage
 * 
 * PHASE 4 - Analyse Performance :
 * ‚Ä¢ Identifie users avec trop de notifications
 * ‚Ä¢ Nettoie charge excessive automatiquement
 * ‚Ä¢ Optimise performance g√©n√©rale
 * 
 * ===================================================================
 * 
 * ‚è∞ POLITIQUES DE R√âTENTION :
 * 
 * NOTIFICATIONS :
 * ‚Ä¢ read: 30 jours (notifications lues)
 * ‚Ä¢ dismissed: 7 jours (rejet√©es par user)
 * ‚Ä¢ acted: 90 jours (user a cliqu√© action)
 * ‚Ä¢ failed: 3 jours (√©chec d'envoi)
 * ‚Ä¢ expired: 1 jour (expir√©es automatiquement)
 * 
 * INSIGHTS IA :
 * ‚Ä¢ viewed: 180 jours (insights consult√©s)
 * ‚Ä¢ dismissed: 30 jours (insights rejet√©s)
 * ‚Ä¢ expired: 7 jours (insights expir√©s)
 * ‚Ä¢ obsolete: 1 jour (ancienne version ML)
 * 
 * ===================================================================
 * 
 * üéØ AVANTAGES SYST√àME :
 * 
 * PERFORMANCE :
 * ‚Ä¢ Base de donn√©es plus rapide (moins de documents)
 * ‚Ä¢ Index optimis√©s r√©guli√®rement
 * ‚Ä¢ Requ√™tes plus efficaces
 * ‚Ä¢ Moins d'utilisation m√©moire
 * 
 * STORAGE :
 * ‚Ä¢ √âconomise espace disque
 * ‚Ä¢ R√©duit co√ªts MongoDB Atlas
 * ‚Ä¢ √âvite saturation storage
 * ‚Ä¢ Am√©liore backup times
 * 
 * UX :
 * ‚Ä¢ App plus r√©active
 * ‚Ä¢ Chargement notifications plus rapide
 * ‚Ä¢ √âvite clutter interface user
 * ‚Ä¢ Focus sur notifications r√©centes
 * 
 * MAINTENANCE :
 * ‚Ä¢ Pr√©vient probl√®mes performance
 * ‚Ä¢ Identifie users probl√©matiques
 * ‚Ä¢ Optimise automatiquement
 * ‚Ä¢ Monitoring proactif
 * 
 * ===================================================================
 * 
 * üìä EXEMPLES SC√âNARIOS :
 * 
 * Sc√©nario 1 - User Actif :
 * ‚Ä¢ 500 notifications accumul√©es sur 6 mois
 * ‚Ä¢ 300 lues > 30 jours ‚Üí supprim√©es
 * ‚Ä¢ 50 actionn√©es r√©centes ‚Üí gard√©es (historique)
 * ‚Ä¢ 150 r√©centes non lues ‚Üí gard√©es
 * ‚Ä¢ R√©sultat : 200 notifications (optimis√©)
 * 
 * Sc√©nario 2 - User Inactif :
 * ‚Ä¢ 1000+ notifications non lues anciennes
 * ‚Ä¢ D√©tect√© comme "charge excessive"
 * ‚Ä¢ Garde 100 plus r√©centes seulement
 * ‚Ä¢ Supprime 900+ anciennes
 * ‚Ä¢ R√©sultat : Performance restaur√©e
 * 
 * Sc√©nario 3 - Insights IA :
 * ‚Ä¢ 50 insights g√©n√©r√©s sur 1 an
 * ‚Ä¢ 30 vus > 6 mois ‚Üí supprim√©s
 * ‚Ä¢ 10 avec ancienne version ML ‚Üí supprim√©s
 * ‚Ä¢ 10 r√©cents ‚Üí gard√©s
 * ‚Ä¢ R√©sultat : Insights pertinents seulement
 * 
 * ===================================================================
 * 
 * üîß S√âCURIT√âS INT√âGR√âES :
 * 
 * BATCH PROCESSING :
 * ‚Ä¢ Traitement par batch de 500 documents
 * ‚Ä¢ Pauses entre batches (√©vite surcharge)
 * ‚Ä¢ Timeout maximum 5 minutes
 * ‚Ä¢ Rollback si erreur critique
 * 
 * PR√âSERVATION DONN√âES :
 * ‚Ä¢ Garde toujours notifications r√©centes
 * ‚Ä¢ Pr√©serve historique important (acted)
 * ‚Ä¢ Jamais supprimer notifications urgent/critical
 * ‚Ä¢ Backup avant nettoyage (futur)
 * 
 * MONITORING :
 * ‚Ä¢ Logs d√©taill√©s chaque action
 * ‚Ä¢ Statistiques avant/apr√®s nettoyage
 * ‚Ä¢ Alertes si suppression excessive
 * ‚Ä¢ M√©triques performance continues
 * 
 * ===================================================================
 * 
 * üìà M√âTRIQUES SURVEILL√âES :
 * 
 * VOLUMES :
 * ‚Ä¢ Notifications supprim√©es par statut
 * ‚Ä¢ Insights supprim√©s par type
 * ‚Ä¢ Taille base r√©duite (MB)
 * ‚Ä¢ Temps d'ex√©cution total
 * 
 * PERFORMANCE :
 * ‚Ä¢ Vitesse requ√™tes avant/apr√®s
 * ‚Ä¢ Utilisation m√©moire
 * ‚Ä¢ Taille index reconstruits
 * ‚Ä¢ Users avec charge excessive
 * 
 * SANT√â SYST√àME :
 * ‚Ä¢ Erreurs pendant nettoyage
 * ‚Ä¢ Collections analys√©es
 * ‚Ä¢ Index corrompus d√©tect√©s
 * ‚Ä¢ Orphelins supprim√©s
 * 
 * ===================================================================
 * 
 * üöÄ TESTS & VALIDATION :
 * 
 * Test complet :
 * const { runJobManually } = require('./cron');
 * await runJobManually('cleanupNotifications');
 * 
 * Test phase sp√©cifique :
 * const { utils } = require('./cron/cleanupNotifications');
 * await utils.cleanupNotifications();
 * await utils.performDatabaseMaintenance();
 * 
 * Stats avant nettoyage :
 * const stats = await utils.getQuickCleanupStats();
 * console.log(`${stats.estimatedCleanupSize} √©l√©ments √† nettoyer`);
 * 
 * ===================================================================
 * 
 * ‚öôÔ∏è CONFIGURATION PERSONNALISABLE :
 * 
 * Ajuster r√©tention :
 * CONFIG.RETENTION_PERIODS.read = 60; // 60 jours au lieu de 30
 * 
 * Modifier seuils performance :
 * CONFIG.PERFORMANCE_THRESHOLDS.maxNotificationsPerUser = 500;
 * 
 * Activer/d√©sactiver maintenance :
 * CONFIG.DB_MAINTENANCE.rebuildIndexes = false; // D√©sactiver
 * 
 * ===================================================================
 * 
 * üåç CONTEXTE PRODUCTION :
 * 
 * PLANIFICATION :
 * ‚Ä¢ Dimanches 2h : Trafic minimal
 * ‚Ä¢ Dur√©e max : 5-10 minutes
 * ‚Ä¢ Impact minimal sur users
 * ‚Ä¢ Pas pendant heures pointe
 * 
 * MONITORING PRODUCTION :
 * ‚Ä¢ Alertes si > 10 minutes
 * ‚Ä¢ Logs centralis√©s (Winston)
 * ‚Ä¢ M√©triques envoy√©es APM
 * ‚Ä¢ Notifications admin si erreurs
 * 
 * ROLLBACK :
 * ‚Ä¢ Backup automatique avant nettoyage (v2.0)
 * ‚Ä¢ Possibilit√© restauration rapide
 * ‚Ä¢ Logs d√©taill√©s pour audit
 * ‚Ä¢ Proc√©dure d'urgence document√©e
 * 
 * ===================================================================
 * 
 * üìä R√âSULTATS ATTENDUS :
 * 
 * HEBDOMADAIRE :
 * ‚Ä¢ 1000-5000 notifications supprim√©es
 * ‚Ä¢ 100-500 insights supprim√©s
 * ‚Ä¢ 10-50 MB espace lib√©r√©
 * ‚Ä¢ Performance +15-30%
 * 
 * MENSUEL :
 * ‚Ä¢ Base de donn√©es stable
 * ‚Ä¢ Pas de d√©gradation performance
 * ‚Ä¢ Users satisfaits (app rapide)
 * ‚Ä¢ Co√ªts storage ma√Ætris√©s
 * 
 * ===================================================================
 * 
 * üîÆ √âVOLUTIONS FUTURES :
 * 
 * v2.0 :
 * ‚Ä¢ Backup automatique avant nettoyage
 * ‚Ä¢ Archivage notifications importantes
 * ‚Ä¢ ML pour optimiser r√©tention
 * ‚Ä¢ Dashboard monitoring temps r√©el
 * 
 * v3.0 :
 * ‚Ä¢ Nettoyage adaptatif par user
 * ‚Ä¢ Compression donn√©es anciennes
 * ‚Ä¢ Partitioning collections par date
 * ‚Ä¢ Auto-scaling nettoyage selon charge
 * 
 * ===================================================================
 */
